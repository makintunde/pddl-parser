Agent Environment
    Obsvars:
        robot_position : {store, lab, ne_room, sw_room, dep};
    end Obsvars
    RedStates:
    end RedStates
    Actions = {
        none
    };
    Protocol:
        Other : { none };
    end Protocol
    Evolution:
        robot_position=store if ( Performer.Action=move_robot_left and robot_position=ne_room) or 
                                ( Performer.Action=move_robot_up and robot_position=sw_room );
        robot_position=ne_room if ( Performer.Action=move_robot_right and robot_position=store ) or 
                                  ( Performer.Action=move_robot_up and robot_position=dep ) or 
                                  (Performer.Action=move_robot_down and robot_position=lab );
        robot_position=lab if ( Performer.Action=move_robot_up and robot_position=ne_room );
        robot_position=sw_room if ( Performer.Action=move_robot_left and robot_position=dep) or 
                                  ( Performer.Action=move_robot_down and robot_position=store );
        robot_position=dep if ( Performer.Action=move_robot_right and robot_position=sw_room ) or 
                              ( Performer.Action=move_robot_down and robot_position=ne_room );
    end Evolution
end Agent
Agent Performer
    Vars:
        state : { empty };
    end Vars
    Actions = {
        move_robot_up, move_robot_down, move_robot_right, move_robot_left
    };
    Protocol:
        ( Environment.robot_position=sw_room or Environment.robot_position=dep or Environment.robot_position=ne_room ) : { move_robot_up };
        ( Environment.robot_position=store or Environment.robot_position=lab or Environment.robot_position=ne_room ) : { move_robot_down };
        ( Environment.robot_position=sw_room or Environment.robot_position=store ) : { move_robot_right };
        ( Environment.robot_position=dep or Environment.robot_position=ne_room ) : { move_robot_left };
    end Protocol
    Evolution:
        state=empty if state=empty;
    end Evolution
end Agent
Evaluation
    goal if Environment.robot_position=dep;
end Evaluation
InitStates
    Environment.robot_position=store;
end InitStates
Groups
    g1 = { Performer };
end Groups
Fairness
end Fairness
Formulae
    AF goal;
end Formulae
